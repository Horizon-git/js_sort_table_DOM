{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCEA,IAAM,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAiB,EAAM,gBAAgB,CAAC,MAsC9C,SAAS,EAAkB,CAAW,EACpC,OAAO,SAAC,CAAA,CAAI,CAAZ,EACE,OAAA,EAAG,KAAK,CAAC,EAAY,CAAC,WAAW,CAAC,aAAa,CAC7C,EAAG,KAAK,CAAC,EAAY,CAAC,WAAW,C,CAEvC,CAaA,SAAS,EAAY,CAAY,EAC/B,OAAO,WAAW,EAAa,OAAO,CAAC,aAAc,IACvD,C,2D;AAxDA,EAAM,gBAAgB,CAAC,QAAS,SAAC,CAAjC,EACE,GAAI,AAAqB,OAArB,EAAE,MAAM,CAAC,OAAO,CAAW,CAC7B,IAAM,E,A,S,C,E,G,M,O,C,G,O,E,E,EAAW,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,EAAA,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,G,EAAA,I,A,W,M,A,U,wI,IAIjB,OAFe,EAAE,MAAM,CAAC,WAAW,EAGjC,IAAK,QACH,AAwBR,SAAkB,CAAI,CAAE,CAAU,EAChC,EAAK,IAAI,CAAC,EACZ,EA1BiB,EAAM,EAAkB,IACjC,KAEF,KAAK,YACH,AAoBR,SAAkB,CAAI,CAAE,CAAU,EAChC,EAAK,IAAI,CAAC,EACZ,EAtBiB,EAAM,EAAkB,IACjC,KAEF,KAAK,OACH,AAgBR,SAAkB,CAAI,CAAE,CAAU,EAChC,EAAK,IAAI,CAAC,EACZ,EAlBiB,EA4BR,SAAC,CAAA,CAAI,CAAZ,EACE,MAAA,CAAC,EAAG,KAAK,CA7B+B,EA6BlB,CAAC,WAAW,CAAG,CAAC,EAAG,KAAK,CA7BN,EA6BmB,CAAC,WAAW,A,GA5BnE,KAEF,KAAK,UACH,AAYR,SAAkB,CAAI,CAAE,CAAU,EAChC,EAAK,IAAI,CAAC,EACZ,EAdiB,EA6BR,SAAC,CAAA,CAAI,CAAZ,EACE,OAAA,EAAY,EAAG,KAAK,CA9BmB,EA8BN,CAAC,WAAW,EAC3C,EAAY,EAAG,KAAK,CA/BiB,EA+BJ,CAAC,WAAW,C,EA1B/C,CAEA,EAAM,SAAS,CAAG,GAClB,EAAK,OAAO,CAAC,SAAC,CAAd,EAAsB,OAAA,EAAM,MAAM,CAAC,E,EACrC,CACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar table = document.querySelector(\"table\");\nvar tbody = document.querySelector(\"tbody\");\nvar rowsCollection = tbody.querySelectorAll(\"tr\");\ntable.addEventListener(\"click\", function(e) {\n    if (e.target.tagName === \"TH\") {\n        var rows = _to_consumable_array(rowsCollection);\n        var sortBy = e.target.textContent;\n        switch(sortBy){\n            case \"Name\":\n                sortRows(rows, compareTextValues(0));\n                break;\n            case \"Position\":\n                sortRows(rows, compareTextValues(1));\n                break;\n            case \"Age\":\n                sortRows(rows, compareNumericValues(2));\n                break;\n            case \"Salary\":\n                sortRows(rows, compareSalaryValues(3));\n                break;\n            default:\n                break;\n        }\n        tbody.innerHTML = \"\";\n        rows.forEach(function(row) {\n            return tbody.append(row);\n        });\n    }\n});\nfunction sortRows(rows, comparator) {\n    rows.sort(comparator);\n}\nfunction compareTextValues(columnIndex) {\n    return function(r1, r2) {\n        return r1.cells[columnIndex].textContent.localeCompare(r2.cells[columnIndex].textContent);\n    };\n}\nfunction compareNumericValues(columnIndex) {\n    return function(r1, r2) {\n        return +r1.cells[columnIndex].textContent - +r2.cells[columnIndex].textContent;\n    };\n}\nfunction compareSalaryValues(columnIndex) {\n    return function(r1, r2) {\n        return parseSalary(r1.cells[columnIndex].textContent) - parseSalary(r2.cells[columnIndex].textContent);\n    };\n}\nfunction parseSalary(salaryString) {\n    return parseFloat(salaryString.replace(/[^0-9.-]+/g, \"\"));\n}\n\n//# sourceMappingURL=index.0e3fe294.js.map\n","'use strict';\n\nconst table = document.querySelector('table');\nconst tbody = document.querySelector('tbody');\nconst rowsCollection = tbody.querySelectorAll('tr');\n\ntable.addEventListener('click', (e) => {\n  if (e.target.tagName === 'TH') {\n    const rows = [...rowsCollection];\n\n    const sortBy = e.target.textContent;\n\n    switch (sortBy) {\n      case 'Name':\n        sortRows(rows, compareTextValues(0));\n        break;\n\n      case 'Position':\n        sortRows(rows, compareTextValues(1));\n        break;\n\n      case 'Age':\n        sortRows(rows, compareNumericValues(2));\n        break;\n\n      case 'Salary':\n        sortRows(rows, compareSalaryValues(3));\n        break;\n\n      default:\n        break;\n    }\n\n    tbody.innerHTML = '';\n    rows.forEach((row) => tbody.append(row));\n  }\n});\n\nfunction sortRows(rows, comparator) {\n  rows.sort(comparator);\n}\n\nfunction compareTextValues(columnIndex) {\n  return (r1, r2) =>\n    r1.cells[columnIndex].textContent.localeCompare(\n      r2.cells[columnIndex].textContent,\n    );\n}\n\nfunction compareNumericValues(columnIndex) {\n  return (r1, r2) =>\n    +r1.cells[columnIndex].textContent - +r2.cells[columnIndex].textContent;\n}\n\nfunction compareSalaryValues(columnIndex) {\n  return (r1, r2) =>\n    parseSalary(r1.cells[columnIndex].textContent)\n    - parseSalary(r2.cells[columnIndex].textContent);\n}\n\nfunction parseSalary(salaryString) {\n  return parseFloat(salaryString.replace(/[^0-9.-]+/g, ''));\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","table","document","querySelector","tbody","rowsCollection","querySelectorAll","compareTextValues","columnIndex","r1","r2","cells","textContent","localeCompare","parseSalary","salaryString","parseFloat","replace","addEventListener","e","target","tagName","rows","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","sortRows","comparator","sort","innerHTML","forEach","row","append"],"version":3,"file":"index.0e3fe294.js.map"}